import logging
from typing import List, Dict, Any, Optional

import uvicorn
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel, Field

# --- Local Imports ---
# Assumes retriever.py and ingestion_src.py are in the same directory
from retriever import HybridRAGPipeline
from ingestion_src import ingest_document_from_base64

# --- Setup Logging ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- FastAPI App Initialization ---
app = FastAPI(
    title="Legal RAG API",
    description="An API for retrieving information from legal documents and ingesting new ones.",
    version="1.0.0",
)

# --- Initialize the RAG Pipeline ---
# This is created once when the app starts up to avoid reloading models on every request.
try:
    rag_pipeline = HybridRAGPipeline()
except Exception as e:
    logger.error(f"Fatal error during RAG Pipeline initialization: {e}")
    rag_pipeline = None


# --- Pydantic Models for Request/Response Validation ---


class RetrieveRequest(BaseModel):
    """Request model for the /retrieve endpoint."""

    user_query: str = Field(..., min_length=3, description="The user's question.")
    search_type: Optional[str] = Field(
        "hybrid",
        pattern="^(semantic|keyword|hybrid)$",
        description="Search type: 'semantic', 'keyword', or 'hybrid'.",
    )
    k: Optional[int] = Field(5, gt=0, le=20, description="Number of documents to retrieve.")


class RetrieveResponse(BaseModel):
    """Response model for the /retrieve endpoint."""

    query: str
    summary: str
    results: List[Dict[str, Any]]
    metadata: Dict[str, Any]


class IngestRequest(BaseModel):
    """Request model for the /ingest endpoint."""

    base64_text: str = Field(..., description="Base64 encoded content of the file.")
    file_type: str = Field(..., pattern=r"^\.pdf$", description="File extension, e.g., '.pdf'.")
    filename: str = Field(..., min_length=1, description="Original name of the file.")
    metadata: Optional[Dict[str, Any]] = Field({}, description="Optional additional metadata.")


class IngestResponse(BaseModel):
    """Response model for the /ingest endpoint."""

    status: str
    message: str
    filename: str
    chunks_added: int


# --- API Endpoints ---


@app.post("/retrieve", response_model=RetrieveResponse)
async def retrieve(request: RetrieveRequest):
    """
    Receives a user query, retrieves relevant context using hybrid search,
    and returns a summarized answer generated by Gemma.
    """
    if not rag_pipeline:
        raise HTTPException(status_code=503, detail="RAG Pipeline is not available.")

    try:
        logger.info(f"Processing query: {request.user_query}")
        results = rag_pipeline.process_query(
            query=request.user_query, k=request.k, search_type=request.search_type
        )
        return results
    except Exception as e:
        logger.error(f"Error processing retrieve request: {e}")
        raise HTTPException(status_code=500, detail="Failed to process the query.")


@app.post("/ingest", response_model=IngestResponse)
async def ingest(request: IngestRequest):
    """
    Receives a file and ingests its content into the vector store
    by calling the dedicated ingestion function.
    """
    if not rag_pipeline:
        raise HTTPException(status_code=503, detail="RAG Pipeline is not available.")

    try:
        chunks_added = ingest_document_from_base64(
            vectorstore=rag_pipeline.vectorstore,
            base64_text=request.base64_text,
            filename=request.filename,
            file_type=request.file_type,
            metadata=request.metadata,
        )

        return IngestResponse(
            status="success",
            message="File ingested successfully.",
            filename=request.filename,
            chunks_added=chunks_added,
        )
    except (ValueError, TypeError) as e:
        logger.error(f"Invalid request for ingestion: {e}")
        raise HTTPException(status_code=400, detail=str(e))
    except Exception as e:
        logger.error(f"Error during ingestion: {e}")
        raise HTTPException(status_code=500, detail="Failed to ingest the file.")


if __name__ == "__main__":
    # To run this app, navigate to your terminal in this directory and execute:
    # uvicorn main:app --reload
    uvicorn.run("main:app", host="127.0.0.1", port=8000, reload=True)
